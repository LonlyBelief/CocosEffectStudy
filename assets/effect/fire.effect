// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }

        noise: {value: white}
        noisetiling: {value: [1,1,0,0]}

        after: {value: white}
        alphaThreshold: { value: 0.5 }

        firecolor: {value: [1,1,1,1],editor: {type: color}}

        flowvec: {value: [0,0,0,0]}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  out vec4 v_uv1;
  #endif

  uniform Texture{
    vec4 noisetiling;
    vec4 flowvec;
  };

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv1 = (a_uv0 * noisetiling.xy + noisetiling.zw).xyxy + vec4(1,1,1.3,1.3) * flowvec * cc_time.x;
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  in vec4 v_uv1;
  uniform sampler2D texture;
  #endif

  uniform sampler2D noise;
  uniform sampler2D after;

  uniform Fire{
    vec4 firecolor;
  };

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    vec4 s = texture(texture, v_uv0);
    vec4 n = texture(noise,v_uv0);
    vec4 af = texture(after,v_uv0);

    float noise = ((texture(texture, v_uv1.xy) + texture(texture, v_uv1.zw)) * 0.5 ).x;
    #if USE_TEXTURE
      o *= s * noise + n * (1. - n);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
